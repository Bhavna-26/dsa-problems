struct TrieNode {
    struct TrieNode *children[26];

    // isLeaf is true if the node represents
    // end of a word
    bool isLeaf;
};
class Solution{
    public:
    // A : given string to search
    // B : vector of available strings
    void insert(struct TrieNode *root, string key)
{
    // code here
  TrieNode* curr=root;
  for(int i=0;i<key.length();i++){
      int idx=key[i]-'a';
      
      if((curr->children[idx])==NULL){
          TrieNode* n=new TrieNode();
          curr->children[idx]=n;
          
      }
      curr=curr->children[idx];
     
  }
   curr->isLeaf=true;
}
bool search(struct TrieNode *root, string key) 
{
    // code here
    TrieNode* curr=root;
    for(int i=0;i<key.length();i++){
        int idx=key[i]-'a';
        if((curr->children[idx])==NULL)return false;
        curr=curr->children[idx];
    }
    return curr->isLeaf;
}
bool solve(string A,string st,int pos,TrieNode* root){
  if(pos==A.size()){
      
      return true;
  }  
  st+="";
  for(int i=pos;i<A.size();i++){
      if(search(root,A.substr(pos,i+1-pos))){
          if(solve(A,st+A.substr(pos,i+1-pos),i+1,root))return true;
      }
  }
  return false;
}
    int wordBreak(string A, vector<string> &B) {
        //code here
        int flag=0;
        TrieNode* root=new TrieNode();
        for(int i=0;i<B.size();i++){
          insert(root,B[i]);  
        }
        for(int i=0;i<A.size();i++){
            if(search(root,A.substr(0,i+1))){
                 if(solve(A,A.substr(0,i+1),i+1,root))return 1;
            }
        }
        return 0;
        
    }
